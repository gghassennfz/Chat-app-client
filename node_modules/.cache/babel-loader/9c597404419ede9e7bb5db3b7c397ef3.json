{"ast":null,"code":"import { NEW_USER_DATA, newUserDataState, AUTH_USER, LOGIN_USER_DATA, FORGOT_PASSWORD, RESET_PASSWORD_DATA, CONVERSATIONS, USERS, ACTIVE_CONVERSATION, MESSAGE_DATA, PROFILE_DATA, CHANGE_PASSWORD } from \"./types\";\nimport axios from \"../utils/axios\";\nimport history from \"../utils/history\";\nimport { emailConfirmation, root } from \"../utils/Routes\";\nimport EMOJIS from \"../utils/emojis\";\nimport { saveToken, loadDataHelper } from \"./helper\";\nexport const setNewUserData = (newUser, username, email, password, confirmPassword, state) => {\n  if (newUser) {\n    return {\n      type: NEW_USER_DATA,\n      payload: {\n        username,\n        email,\n        password,\n        confirmPassword,\n        state\n      }\n    };\n  } else {\n    return {\n      type: NEW_USER_DATA,\n      payload: null\n    };\n  }\n};\nexport const signupUser = () => async (dispatch, getState) => {\n  const {\n    newUserData\n  } = getState();\n  newUserData.joinedAt = Date.now();\n\n  try {\n    await axios.post(\"/api/v1/users/signup\", newUserData);\n    dispatch({\n      type: NEW_USER_DATA,\n      payload: { ...newUserData,\n        state: newUserDataState.submitted\n      }\n    });\n    history.push(emailConfirmation);\n  } catch (err) {\n    dispatch({\n      type: NEW_USER_DATA,\n      payload: { ...newUserData,\n        state: newUserDataState.failed\n      }\n    });\n  }\n};\nexport const resendAccountActivateEmail = () => async (dispatch, getState) => {\n  const {\n    newUserData\n  } = getState();\n  dispatch({\n    type: NEW_USER_DATA,\n    payload: { ...newUserData,\n      state: newUserDataState.resubmitting\n    }\n  });\n\n  try {\n    await axios.post(\"/api/v1/users/resendActivationLink\", {\n      email: newUserData.email\n    });\n    dispatch({\n      type: NEW_USER_DATA,\n      payload: { ...newUserData,\n        state: newUserDataState.submitted\n      }\n    });\n    history.push(emailConfirmation);\n  } catch (err) {\n    dispatch({\n      type: NEW_USER_DATA,\n      payload: { ...newUserData,\n        state: newUserDataState.emailNotExist\n      }\n    });\n  }\n};\nexport const activateAccount = token => async dispatch => {\n  dispatch({\n    type: NEW_USER_DATA,\n    payload: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      state: newUserDataState.activatingAccount\n    }\n  });\n\n  try {\n    const user = await axios.get(`/api/v1/users/activateAccount/${token}`);\n    dispatch({\n      type: AUTH_USER,\n      payload: {\n        token: user.data.token,\n        user: user.data.user\n      }\n    });\n    dispatch({\n      type: NEW_USER_DATA,\n      payload: {\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n        state: newUserDataState.accountActivated\n      }\n    });\n    saveToken(user.data.token);\n    history.push(\"/conversations\");\n    loadDataHelper(dispatch, user.data.token, true, true, user.data.user);\n  } catch (err) {\n    dispatch({\n      type: NEW_USER_DATA,\n      payload: {\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n        state: newUserDataState.invalidToken\n      }\n    });\n  }\n};\nexport const setLoginData = (mount, email, password) => {\n  if (mount) {\n    return {\n      type: LOGIN_USER_DATA,\n      payload: {\n        email,\n        password\n      }\n    };\n  } else {\n    return {\n      type: LOGIN_USER_DATA,\n      payload: null\n    };\n  }\n};\nexport const loginUser = () => async (dispatch, getState) => {\n  const {\n    loginUserData\n  } = getState();\n  dispatch({\n    type: LOGIN_USER_DATA,\n    payload: { ...loginUserData,\n      state: \"submitting\"\n    }\n  });\n\n  try {\n    const user = await axios.post(\"/api/v1/users/login\", loginUserData);\n    dispatch({\n      type: AUTH_USER,\n      payload: {\n        user: user.data.user\n      }\n    });\n    saveToken(user.data.token);\n    history.push(\"/conversations\");\n    loadDataHelper(dispatch, user.data.token, true, true, user.data.user);\n  } catch (err) {\n    dispatch({\n      type: LOGIN_USER_DATA,\n      payload: { ...loginUserData,\n        loginFailed: true,\n        state: \"failed\"\n      }\n    });\n  }\n};\nexport const setForgotPassword = (email, state, mount) => {\n  if (mount) {\n    return {\n      type: FORGOT_PASSWORD,\n      payload: {\n        email,\n        state\n      }\n    };\n  } else {\n    return {\n      type: FORGOT_PASSWORD,\n      payload: null\n    };\n  }\n};\nexport const sendForgotPassword = () => async (dispatch, getState) => {\n  const {\n    email\n  } = getState().forgotPassword;\n  dispatch({\n    type: FORGOT_PASSWORD,\n    payload: {\n      email,\n      state: \"submitting\"\n    }\n  });\n\n  try {\n    await axios.post(\"/api/v1/users/forgotPassword\", {\n      email\n    });\n    dispatch({\n      type: FORGOT_PASSWORD,\n      payload: {\n        email,\n        state: \"submitted\"\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: FORGOT_PASSWORD,\n      payload: {\n        email,\n        state: \"failed\"\n      }\n    });\n  }\n};\nexport const setResetPassword = (mount, password, confirmPassword, state) => {\n  if (mount) {\n    return {\n      type: RESET_PASSWORD_DATA,\n      payload: {\n        password,\n        confirmPassword,\n        state\n      }\n    };\n  } else {\n    return {\n      type: RESET_PASSWORD_DATA,\n      payload: null\n    };\n  }\n};\nexport const resetPassword = token => async (dispatch, getState) => {\n  const {\n    resetPasswordData\n  } = getState();\n  dispatch({\n    type: RESET_PASSWORD_DATA,\n    payload: { ...resetPasswordData,\n      state: \"submitting\"\n    }\n  });\n\n  try {\n    const user = await axios.patch(`/api/v1/users/resetPassword/${token}`, resetPasswordData);\n    dispatch({\n      type: AUTH_USER,\n      payload: {\n        token: user.data.token,\n        user: user.data.user\n      }\n    });\n    saveToken(user.data.token);\n    history.push(\"/conversations\");\n    loadDataHelper(dispatch, user.data.token, true, true, user.data.user);\n  } catch (err) {\n    dispatch({\n      type: RESET_PASSWORD_DATA,\n      payload: { ...resetPasswordData,\n        state: newUserDataState.invalidToken\n      }\n    });\n  }\n};\nexport const setActiveConversation = conversation => {\n  return {\n    type: ACTIVE_CONVERSATION,\n    payload: conversation\n  };\n};\nexport const createConversation = id => async (dispatch, getState) => {\n  const {\n    auth\n  } = getState();\n  const token = localStorage.getItem(\"token\");\n  dispatch({\n    type: ACTIVE_CONVERSATION,\n    payload: {\n      state: \"creating\",\n      id\n    }\n  });\n\n  try {\n    await axios.post(\"/api/v1/conversations\", {\n      user1: auth.user._id,\n      user2: id,\n      createdAt: Date.now()\n    }, {\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: ACTIVE_CONVERSATION,\n      payload: {\n        state: \"failed\"\n      }\n    });\n  }\n};\nexport const setMessageData = (message, state) => {\n  return {\n    type: MESSAGE_DATA,\n    payload: {\n      message,\n      state\n    }\n  };\n};\nexport const sendMessage = () => async (dispatch, getState) => {\n  const {\n    message,\n    auth,\n    activeConversation\n  } = getState();\n  const token = localStorage.getItem(\"token\");\n  dispatch({\n    type: MESSAGE_DATA,\n    payload: {\n      message: message.message,\n      state: \"submitting\"\n    }\n  });\n\n  try {\n    await axios.post(\"/api/v1/messages\", {\n      conversation: activeConversation._id,\n      user: auth.user._id,\n      message: message.message,\n      createdAt: Date.now()\n    }, {\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    });\n    dispatch({\n      type: MESSAGE_DATA,\n      payload: {\n        message: \"\",\n        state: \"submitted\"\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: MESSAGE_DATA,\n      payload: {\n        message: message.message,\n        state: \"failed\"\n      }\n    });\n  }\n};\nexport const userInserted = user => (dispatch, getState) => {\n  const {\n    users\n  } = getState();\n\n  if (users.findIndex(sUser => sUser._id === user._id) === -1) {\n    const newUsers = [...users, user];\n    dispatch({\n      type: USERS,\n      payload: [...newUsers]\n    });\n  }\n};\nexport const userUpdated = updates => (dispatch, getState) => {\n  let {\n    users,\n    auth\n  } = getState();\n  let updatedUser;\n  let i = users.findIndex(user => user._id === updates.id);\n  if (i < 0) return;\n  updatedUser = { ...users[i],\n    ...updates.updatedFields\n  };\n\n  if (auth.user._id === updates.id) {\n    dispatch({\n      type: AUTH_USER,\n      payload: { ...auth,\n        user: updatedUser\n      }\n    });\n  }\n\n  users = [...users.slice(0, i), updatedUser, ...users.slice(i + 1)];\n  dispatch({\n    type: USERS,\n    payload: users\n  });\n};\nexport const userDeleted = id => (dispatch, getState) => {\n  const {\n    users\n  } = getState();\n  const newUsers = users.filter(user => user._id !== id);\n  dispatch({\n    type: USERS,\n    payload: [...newUsers]\n  });\n};\nexport const conversationInserted = doc => (dispatch, getState) => {\n  let {\n    conversations,\n    auth,\n    activeConversation\n  } = getState(); // insert conversation only if it is for auth user\n\n  if (doc.user1 === auth.user._id || doc.user2 === auth.user._id) {\n    if (conversations.data.findIndex(con => con._id === doc._id) === -1) {\n      conversations.data = [...conversations.data, doc];\n      let count = 0;\n      conversations.data.forEach(con => {\n        const lastMsg = con.messages[con.messages.length - 1];\n\n        if (!lastMsg || lastMsg.user !== auth.user._id) {\n          count++;\n        }\n      });\n      dispatch({\n        type: CONVERSATIONS,\n        payload: {\n          data: [...conversations.data],\n          notifications: count\n        }\n      });\n\n      if (activeConversation && activeConversation.id) {\n        dispatch({\n          type: ACTIVE_CONVERSATION,\n          payload: doc\n        });\n      }\n    }\n  }\n};\nexport const conversationDeleted = data => (dispatch, getState) => {\n  let {\n    conversations,\n    auth,\n    activeConversation\n  } = getState();\n\n  if (activeConversation && activeConversation._id === data._id) {\n    dispatch({\n      type: ACTIVE_CONVERSATION,\n      payload: null\n    });\n  }\n\n  conversations.data = conversations.data.filter(con => con._id !== data._id);\n  let count = 0;\n  conversations.data.forEach(con => {\n    const lastMsg = con.messages[con.messages.length - 1];\n\n    if (!lastMsg || lastMsg.user !== auth.user._id) {\n      count++;\n    }\n  });\n  dispatch({\n    type: CONVERSATIONS,\n    payload: {\n      data: [...conversations.data],\n      notifications: count\n    }\n  });\n};\nexport const messageInserted = doc => (dispatch, getState) => {\n  const {\n    conversations,\n    auth\n  } = getState();\n  let i = conversations.data.findIndex(con => con._id === doc.conversation);\n\n  if (i >= 0) {\n    if (conversations.data[i].messages.findIndex(el => el._id === doc._id) === -1) {\n      conversations.data[i].messages = [...conversations.data[i].messages, doc];\n      const newConversations = [...conversations.data];\n      let count = 0;\n      newConversations.forEach(con => {\n        const lastMsg = con.messages[con.messages.length - 1];\n\n        if (!lastMsg || lastMsg.user !== auth.user._id) {\n          count++;\n        }\n      });\n      dispatch({\n        type: CONVERSATIONS,\n        payload: {\n          data: newConversations,\n          notifications: count\n        }\n      });\n\n      if (doc.user === auth.user._id) {\n        dispatch({\n          type: ACTIVE_CONVERSATION,\n          payload: newConversations[i]\n        });\n      }\n    }\n  }\n};\nexport const addEmoji = id => (dispatch, getState) => {\n  const {\n    message\n  } = getState();\n  let emoji = EMOJIS.slice(id, id + 2);\n  dispatch({\n    type: MESSAGE_DATA,\n    payload: { ...message,\n      message: message.message + emoji\n    }\n  });\n};\nexport const setProfileData = (username, email) => {\n  return {\n    type: PROFILE_DATA,\n    payload: {\n      username,\n      email\n    }\n  };\n};\nexport const saveProfileData = () => async (dispatch, getState) => {\n  const {\n    profileData\n  } = getState();\n  const userAvatar = document.querySelector(\".user-avatar\");\n  const formData = new FormData();\n  formData.append(\"username\", profileData.username);\n  formData.append(\"email\", profileData.email);\n\n  if (userAvatar.files.length) {\n    formData.append(\"avatar\", userAvatar.files[0]);\n  }\n\n  dispatch({\n    type: PROFILE_DATA,\n    payload: { ...profileData,\n      state: \"saving\"\n    }\n  });\n  const token = localStorage.getItem(\"token\");\n\n  try {\n    await axios.patch(\"/api/v1/users/updateMe\", formData, {\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    });\n    dispatch({\n      type: PROFILE_DATA,\n      payload: { ...profileData,\n        state: \"saved\"\n      }\n    });\n    setTimeout(() => {\n      dispatch({\n        type: PROFILE_DATA,\n        payload: { ...profileData,\n          state: \"\"\n        }\n      });\n    }, 3000);\n    if (userAvatar.files.length) window.location.reload();\n  } catch (err) {\n    dispatch({\n      type: PROFILE_DATA,\n      payload: { ...profileData,\n        state: \"failed\"\n      }\n    });\n    console.log(err);\n  }\n};\nexport const setChangePasswordData = (currentPassword, newPassword, confirmPassword) => {\n  return {\n    type: CHANGE_PASSWORD,\n    payload: {\n      currentPassword,\n      newPassword,\n      confirmPassword\n    }\n  };\n};\nexport const saveNewPassword = () => async (dispatch, getState) => {\n  const {\n    changePassword\n  } = getState();\n\n  if (changePassword.newPassword.length < 12) {\n    dispatch({\n      type: CHANGE_PASSWORD,\n      payload: { ...changePassword,\n        state: \"validation,New password length should be greater than 12.\"\n      }\n    });\n    return;\n  } else if (changePassword.newPassword !== changePassword.confirmPassword) {\n    dispatch({\n      type: CHANGE_PASSWORD,\n      payload: { ...changePassword,\n        state: \"validation,New password and Confirm password are not same.\"\n      }\n    });\n    return;\n  }\n\n  dispatch({\n    type: CHANGE_PASSWORD,\n    payload: { ...changePassword,\n      state: \"saving\"\n    }\n  });\n  const token = localStorage.getItem(\"token\");\n\n  try {\n    const user = await axios.patch(\"/api/v1/users/updatePassword\", changePassword, {\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    });\n    saveToken(user.data.token);\n    dispatch({\n      type: CHANGE_PASSWORD,\n      payload: {\n        currentPassword: \"\",\n        newPassword: \"\",\n        confirmPassword: \"\",\n        state: \"saved\"\n      }\n    });\n    setTimeout(() => {\n      dispatch({\n        type: CHANGE_PASSWORD,\n        payload: {\n          currentPassword: \"\",\n          newPassword: \"\",\n          confirmPassword: \"\",\n          state: \"\"\n        }\n      });\n    }, 3000);\n  } catch (err) {\n    dispatch({\n      type: CHANGE_PASSWORD,\n      payload: { ...changePassword,\n        state: \"failed\"\n      }\n    });\n  }\n};\nexport const logout = () => async (dispatch, getState) => {\n  dispatch({\n    type: AUTH_USER,\n    payload: {}\n  });\n  dispatch({\n    type: CONVERSATIONS,\n    payload: {\n      data: [],\n      notifications: 0\n    }\n  });\n  dispatch({\n    type: USERS,\n    payload: []\n  });\n  localStorage.setItem(\"token\", \"\");\n  await axios.get(\"/api/v1/users/logout\");\n};\nexport const deleteAccount = () => async (dispatch, getState) => {\n  const token = localStorage.getItem(\"token\");\n\n  try {\n    await axios.delete(\"/api/v1/users/deleteMe\", {\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    });\n    history.push(root);\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const loadData = () => async dispatch => {\n  const token = localStorage.getItem(\"token\");\n  loadDataHelper(dispatch, token, true, true, false, true);\n};","map":{"version":3,"sources":["C:/Users/Ghassen/Desktop/lyoum/3/chat-app-client/src/actions/index.js"],"names":["NEW_USER_DATA","newUserDataState","AUTH_USER","LOGIN_USER_DATA","FORGOT_PASSWORD","RESET_PASSWORD_DATA","CONVERSATIONS","USERS","ACTIVE_CONVERSATION","MESSAGE_DATA","PROFILE_DATA","CHANGE_PASSWORD","axios","history","emailConfirmation","root","EMOJIS","saveToken","loadDataHelper","setNewUserData","newUser","username","email","password","confirmPassword","state","type","payload","signupUser","dispatch","getState","newUserData","joinedAt","Date","now","post","submitted","push","err","failed","resendAccountActivateEmail","resubmitting","emailNotExist","activateAccount","token","activatingAccount","user","get","data","accountActivated","invalidToken","setLoginData","mount","loginUser","loginUserData","loginFailed","setForgotPassword","sendForgotPassword","forgotPassword","setResetPassword","resetPassword","resetPasswordData","patch","setActiveConversation","conversation","createConversation","id","auth","localStorage","getItem","user1","_id","user2","createdAt","headers","authorization","setMessageData","message","sendMessage","activeConversation","userInserted","users","findIndex","sUser","newUsers","userUpdated","updates","updatedUser","i","updatedFields","slice","userDeleted","filter","conversationInserted","doc","conversations","con","count","forEach","lastMsg","messages","length","notifications","conversationDeleted","messageInserted","el","newConversations","addEmoji","emoji","setProfileData","saveProfileData","profileData","userAvatar","document","querySelector","formData","FormData","append","files","setTimeout","window","location","reload","console","log","setChangePasswordData","currentPassword","newPassword","saveNewPassword","changePassword","logout","setItem","deleteAccount","delete","loadData"],"mappings":"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","sourcesContent":["import {\r\n  NEW_USER_DATA,\r\n  newUserDataState,\r\n  AUTH_USER,\r\n  LOGIN_USER_DATA,\r\n  FORGOT_PASSWORD,\r\n  RESET_PASSWORD_DATA,\r\n  CONVERSATIONS,\r\n  USERS,\r\n  ACTIVE_CONVERSATION,\r\n  MESSAGE_DATA,\r\n  PROFILE_DATA,\r\n  CHANGE_PASSWORD,\r\n} from \"./types\";\r\nimport axios from \"../utils/axios\";\r\nimport history from \"../utils/history\";\r\nimport { emailConfirmation, root } from \"../utils/Routes\";\r\nimport EMOJIS from \"../utils/emojis\";\r\nimport { saveToken, loadDataHelper } from \"./helper\";\r\n\r\nexport const setNewUserData = (\r\n  newUser,\r\n  username,\r\n  email,\r\n  password,\r\n  confirmPassword,\r\n  state\r\n) => {\r\n  if (newUser) {\r\n    return {\r\n      type: NEW_USER_DATA,\r\n      payload: {\r\n        username,\r\n        email,\r\n        password,\r\n        confirmPassword,\r\n        state,\r\n      },\r\n    };\r\n  } else {\r\n    return {\r\n      type: NEW_USER_DATA,\r\n      payload: null,\r\n    };\r\n  }\r\n};\r\n\r\nexport const signupUser = () => async (dispatch, getState) => {\r\n  const { newUserData } = getState();\r\n  newUserData.joinedAt = Date.now();\r\n\r\n  try {\r\n    await axios.post(\"/api/v1/users/signup\", newUserData);\r\n    dispatch({\r\n      type: NEW_USER_DATA,\r\n      payload: {\r\n        ...newUserData,\r\n        state: newUserDataState.submitted,\r\n      },\r\n    });\r\n    history.push(emailConfirmation);\r\n  } catch (err) {\r\n    dispatch({\r\n      type: NEW_USER_DATA,\r\n      payload: {\r\n        ...newUserData,\r\n        state: newUserDataState.failed,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const resendAccountActivateEmail = () => async (dispatch, getState) => {\r\n  const { newUserData } = getState();\r\n\r\n  dispatch({\r\n    type: NEW_USER_DATA,\r\n    payload: {\r\n      ...newUserData,\r\n      state: newUserDataState.resubmitting,\r\n    },\r\n  });\r\n\r\n  try {\r\n    await axios.post(\"/api/v1/users/resendActivationLink\", {\r\n      email: newUserData.email,\r\n    });\r\n    dispatch({\r\n      type: NEW_USER_DATA,\r\n      payload: {\r\n        ...newUserData,\r\n        state: newUserDataState.submitted,\r\n      },\r\n    });\r\n    history.push(emailConfirmation);\r\n  } catch (err) {\r\n    dispatch({\r\n      type: NEW_USER_DATA,\r\n      payload: {\r\n        ...newUserData,\r\n        state: newUserDataState.emailNotExist,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const activateAccount = (token) => async (dispatch) => {\r\n  dispatch({\r\n    type: NEW_USER_DATA,\r\n    payload: {\r\n      username: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n      state: newUserDataState.activatingAccount,\r\n    },\r\n  });\r\n  try {\r\n    const user = await axios.get(`/api/v1/users/activateAccount/${token}`);\r\n\r\n    dispatch({\r\n      type: AUTH_USER,\r\n      payload: {\r\n        token: user.data.token,\r\n        user: user.data.user,\r\n      },\r\n    });\r\n\r\n    dispatch({\r\n      type: NEW_USER_DATA,\r\n      payload: {\r\n        username: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        state: newUserDataState.accountActivated,\r\n      },\r\n    });\r\n\r\n    saveToken(user.data.token);\r\n\r\n    history.push(\"/conversations\");\r\n\r\n    loadDataHelper(dispatch, user.data.token, true, true, user.data.user);\r\n  } catch (err) {\r\n    dispatch({\r\n      type: NEW_USER_DATA,\r\n      payload: {\r\n        username: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        state: newUserDataState.invalidToken,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const setLoginData = (mount, email, password) => {\r\n  if (mount) {\r\n    return {\r\n      type: LOGIN_USER_DATA,\r\n      payload: {\r\n        email,\r\n        password,\r\n      },\r\n    };\r\n  } else {\r\n    return {\r\n      type: LOGIN_USER_DATA,\r\n      payload: null,\r\n    };\r\n  }\r\n};\r\n\r\nexport const loginUser = () => async (dispatch, getState) => {\r\n  const { loginUserData } = getState();\r\n\r\n  dispatch({\r\n    type: LOGIN_USER_DATA,\r\n    payload: {\r\n      ...loginUserData,\r\n      state: \"submitting\",\r\n    },\r\n  });\r\n\r\n  try {\r\n    const user = await axios.post(\"/api/v1/users/login\", loginUserData);\r\n\r\n    dispatch({\r\n      type: AUTH_USER,\r\n      payload: {\r\n        user: user.data.user,\r\n      },\r\n    });\r\n\r\n    saveToken(user.data.token);\r\n\r\n    history.push(\"/conversations\");\r\n\r\n    loadDataHelper(dispatch, user.data.token, true, true, user.data.user);\r\n  } catch (err) {\r\n    dispatch({\r\n      type: LOGIN_USER_DATA,\r\n      payload: {\r\n        ...loginUserData,\r\n        loginFailed: true,\r\n        state: \"failed\",\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const setForgotPassword = (email, state, mount) => {\r\n  if (mount) {\r\n    return {\r\n      type: FORGOT_PASSWORD,\r\n      payload: {\r\n        email,\r\n        state,\r\n      },\r\n    };\r\n  } else {\r\n    return {\r\n      type: FORGOT_PASSWORD,\r\n      payload: null,\r\n    };\r\n  }\r\n};\r\n\r\nexport const sendForgotPassword = () => async (dispatch, getState) => {\r\n  const { email } = getState().forgotPassword;\r\n\r\n  dispatch({\r\n    type: FORGOT_PASSWORD,\r\n    payload: {\r\n      email,\r\n      state: \"submitting\",\r\n    },\r\n  });\r\n\r\n  try {\r\n    await axios.post(\"/api/v1/users/forgotPassword\", { email });\r\n    dispatch({\r\n      type: FORGOT_PASSWORD,\r\n      payload: {\r\n        email,\r\n        state: \"submitted\",\r\n      },\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: FORGOT_PASSWORD,\r\n      payload: {\r\n        email,\r\n        state: \"failed\",\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const setResetPassword = (mount, password, confirmPassword, state) => {\r\n  if (mount) {\r\n    return {\r\n      type: RESET_PASSWORD_DATA,\r\n      payload: {\r\n        password,\r\n        confirmPassword,\r\n        state,\r\n      },\r\n    };\r\n  } else {\r\n    return {\r\n      type: RESET_PASSWORD_DATA,\r\n      payload: null,\r\n    };\r\n  }\r\n};\r\n\r\nexport const resetPassword = (token) => async (dispatch, getState) => {\r\n  const { resetPasswordData } = getState();\r\n\r\n  dispatch({\r\n    type: RESET_PASSWORD_DATA,\r\n    payload: {\r\n      ...resetPasswordData,\r\n      state: \"submitting\",\r\n    },\r\n  });\r\n\r\n  try {\r\n    const user = await axios.patch(\r\n      `/api/v1/users/resetPassword/${token}`,\r\n      resetPasswordData\r\n    );\r\n\r\n    dispatch({\r\n      type: AUTH_USER,\r\n      payload: {\r\n        token: user.data.token,\r\n        user: user.data.user,\r\n      },\r\n    });\r\n\r\n    saveToken(user.data.token);\r\n\r\n    history.push(\"/conversations\");\r\n\r\n    loadDataHelper(dispatch, user.data.token, true, true, user.data.user);\r\n  } catch (err) {\r\n    dispatch({\r\n      type: RESET_PASSWORD_DATA,\r\n      payload: {\r\n        ...resetPasswordData,\r\n        state: newUserDataState.invalidToken,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const setActiveConversation = (conversation) => {\r\n  return {\r\n    type: ACTIVE_CONVERSATION,\r\n    payload: conversation,\r\n  };\r\n};\r\n\r\nexport const createConversation = (id) => async (dispatch, getState) => {\r\n  const { auth } = getState();\r\n\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  dispatch({\r\n    type: ACTIVE_CONVERSATION,\r\n    payload: {\r\n      state: \"creating\",\r\n      id,\r\n    },\r\n  });\r\n\r\n  try {\r\n    await axios.post(\r\n      \"/api/v1/conversations\",\r\n      { user1: auth.user._id, user2: id, createdAt: Date.now() },\r\n      {\r\n        headers: {\r\n          authorization: `Bearer ${token}`,\r\n        },\r\n      }\r\n    );\r\n  } catch (err) {\r\n    dispatch({\r\n      type: ACTIVE_CONVERSATION,\r\n      payload: {\r\n        state: \"failed\",\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const setMessageData = (message, state) => {\r\n  return {\r\n    type: MESSAGE_DATA,\r\n    payload: {\r\n      message,\r\n      state,\r\n    },\r\n  };\r\n};\r\n\r\nexport const sendMessage = () => async (dispatch, getState) => {\r\n  const { message, auth, activeConversation } = getState();\r\n\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  dispatch({\r\n    type: MESSAGE_DATA,\r\n    payload: {\r\n      message: message.message,\r\n      state: \"submitting\",\r\n    },\r\n  });\r\n\r\n  try {\r\n    await axios.post(\r\n      \"/api/v1/messages\",\r\n      {\r\n        conversation: activeConversation._id,\r\n        user: auth.user._id,\r\n        message: message.message,\r\n        createdAt: Date.now(),\r\n      },\r\n      {\r\n        headers: {\r\n          authorization: `Bearer ${token}`,\r\n        },\r\n      }\r\n    );\r\n\r\n    dispatch({\r\n      type: MESSAGE_DATA,\r\n      payload: {\r\n        message: \"\",\r\n        state: \"submitted\",\r\n      },\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: MESSAGE_DATA,\r\n      payload: {\r\n        message: message.message,\r\n        state: \"failed\",\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const userInserted = (user) => (dispatch, getState) => {\r\n  const { users } = getState();\r\n  if (users.findIndex((sUser) => sUser._id === user._id) === -1) {\r\n    const newUsers = [...users, user];\r\n\r\n    dispatch({\r\n      type: USERS,\r\n      payload: [...newUsers],\r\n    });\r\n  }\r\n};\r\n\r\nexport const userUpdated = (updates) => (dispatch, getState) => {\r\n  let { users, auth } = getState();\r\n\r\n  let updatedUser;\r\n  let i = users.findIndex((user) => user._id === updates.id);\r\n\r\n  if (i < 0) return;\r\n\r\n  updatedUser = {\r\n    ...users[i],\r\n    ...updates.updatedFields,\r\n  };\r\n\r\n  if (auth.user._id === updates.id) {\r\n    dispatch({\r\n      type: AUTH_USER,\r\n      payload: {\r\n        ...auth,\r\n        user: updatedUser,\r\n      },\r\n    });\r\n  }\r\n\r\n  users = [...users.slice(0, i), updatedUser, ...users.slice(i + 1)];\r\n\r\n  dispatch({\r\n    type: USERS,\r\n    payload: users,\r\n  });\r\n};\r\n\r\nexport const userDeleted = (id) => (dispatch, getState) => {\r\n  const { users } = getState();\r\n\r\n  const newUsers = users.filter((user) => user._id !== id);\r\n\r\n  dispatch({\r\n    type: USERS,\r\n    payload: [...newUsers],\r\n  });\r\n};\r\n\r\nexport const conversationInserted = (doc) => (dispatch, getState) => {\r\n  let { conversations, auth, activeConversation } = getState();\r\n\r\n  // insert conversation only if it is for auth user\r\n  if (doc.user1 === auth.user._id || doc.user2 === auth.user._id) {\r\n    if (conversations.data.findIndex((con) => con._id === doc._id) === -1) {\r\n      conversations.data = [...conversations.data, doc];\r\n\r\n      let count = 0;\r\n      conversations.data.forEach((con) => {\r\n        const lastMsg = con.messages[con.messages.length - 1];\r\n\r\n        if (!lastMsg || lastMsg.user !== auth.user._id) {\r\n          count++;\r\n        }\r\n      });\r\n\r\n      dispatch({\r\n        type: CONVERSATIONS,\r\n        payload: {\r\n          data: [...conversations.data],\r\n          notifications: count,\r\n        },\r\n      });\r\n\r\n      if (activeConversation && activeConversation.id) {\r\n        dispatch({\r\n          type: ACTIVE_CONVERSATION,\r\n          payload: doc,\r\n        });\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const conversationDeleted = (data) => (dispatch, getState) => {\r\n  let { conversations, auth, activeConversation } = getState();\r\n\r\n  if (activeConversation && activeConversation._id === data._id) {\r\n    dispatch({\r\n      type: ACTIVE_CONVERSATION,\r\n      payload: null,\r\n    });\r\n  }\r\n\r\n  conversations.data = conversations.data.filter((con) => con._id !== data._id);\r\n\r\n  let count = 0;\r\n  conversations.data.forEach((con) => {\r\n    const lastMsg = con.messages[con.messages.length - 1];\r\n\r\n    if (!lastMsg || lastMsg.user !== auth.user._id) {\r\n      count++;\r\n    }\r\n  });\r\n\r\n  dispatch({\r\n    type: CONVERSATIONS,\r\n    payload: {\r\n      data: [...conversations.data],\r\n      notifications: count,\r\n    },\r\n  });\r\n};\r\n\r\nexport const messageInserted = (doc) => (dispatch, getState) => {\r\n  const { conversations, auth } = getState();\r\n\r\n  let i = conversations.data.findIndex((con) => con._id === doc.conversation);\r\n\r\n  if (i >= 0) {\r\n    if (\r\n      conversations.data[i].messages.findIndex((el) => el._id === doc._id) ===\r\n      -1\r\n    ) {\r\n      conversations.data[i].messages = [...conversations.data[i].messages, doc];\r\n\r\n      const newConversations = [...conversations.data];\r\n\r\n      let count = 0;\r\n      newConversations.forEach((con) => {\r\n        const lastMsg = con.messages[con.messages.length - 1];\r\n\r\n        if (!lastMsg || lastMsg.user !== auth.user._id) {\r\n          count++;\r\n        }\r\n      });\r\n\r\n      dispatch({\r\n        type: CONVERSATIONS,\r\n        payload: {\r\n          data: newConversations,\r\n          notifications: count,\r\n        },\r\n      });\r\n\r\n      if (doc.user === auth.user._id) {\r\n        dispatch({\r\n          type: ACTIVE_CONVERSATION,\r\n          payload: newConversations[i],\r\n        });\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const addEmoji = (id) => (dispatch, getState) => {\r\n  const { message } = getState();\r\n\r\n  let emoji = EMOJIS.slice(id, id + 2);\r\n\r\n  dispatch({\r\n    type: MESSAGE_DATA,\r\n    payload: {\r\n      ...message,\r\n      message: message.message + emoji,\r\n    },\r\n  });\r\n};\r\n\r\nexport const setProfileData = (username, email) => {\r\n  return {\r\n    type: PROFILE_DATA,\r\n    payload: {\r\n      username,\r\n      email,\r\n    },\r\n  };\r\n};\r\n\r\nexport const saveProfileData = () => async (dispatch, getState) => {\r\n  const { profileData } = getState();\r\n\r\n  const userAvatar = document.querySelector(\".user-avatar\");\r\n  const formData = new FormData();\r\n  formData.append(\"username\", profileData.username);\r\n  formData.append(\"email\", profileData.email);\r\n\r\n  if (userAvatar.files.length) {\r\n    formData.append(\"avatar\", userAvatar.files[0]);\r\n  }\r\n\r\n  dispatch({\r\n    type: PROFILE_DATA,\r\n    payload: {\r\n      ...profileData,\r\n      state: \"saving\",\r\n    },\r\n  });\r\n\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  try {\r\n    await axios.patch(\"/api/v1/users/updateMe\", formData, {\r\n      headers: {\r\n        authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n\r\n    dispatch({\r\n      type: PROFILE_DATA,\r\n      payload: {\r\n        ...profileData,\r\n        state: \"saved\",\r\n      },\r\n    });\r\n\r\n    setTimeout(() => {\r\n      dispatch({\r\n        type: PROFILE_DATA,\r\n        payload: {\r\n          ...profileData,\r\n          state: \"\",\r\n        },\r\n      });\r\n    }, 3000);\r\n\r\n    if (userAvatar.files.length) window.location.reload();\r\n  } catch (err) {\r\n    dispatch({\r\n      type: PROFILE_DATA,\r\n      payload: {\r\n        ...profileData,\r\n        state: \"failed\",\r\n      },\r\n    });\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport const setChangePasswordData = (\r\n  currentPassword,\r\n  newPassword,\r\n  confirmPassword\r\n) => {\r\n  return {\r\n    type: CHANGE_PASSWORD,\r\n    payload: {\r\n      currentPassword,\r\n      newPassword,\r\n      confirmPassword,\r\n    },\r\n  };\r\n};\r\n\r\nexport const saveNewPassword = () => async (dispatch, getState) => {\r\n  const { changePassword } = getState();\r\n\r\n  if (changePassword.newPassword.length < 12) {\r\n    dispatch({\r\n      type: CHANGE_PASSWORD,\r\n      payload: {\r\n        ...changePassword,\r\n        state: \"validation,New password length should be greater than 12.\",\r\n      },\r\n    });\r\n    return;\r\n  } else if (changePassword.newPassword !== changePassword.confirmPassword) {\r\n    dispatch({\r\n      type: CHANGE_PASSWORD,\r\n      payload: {\r\n        ...changePassword,\r\n        state: \"validation,New password and Confirm password are not same.\",\r\n      },\r\n    });\r\n    return;\r\n  }\r\n\r\n  dispatch({\r\n    type: CHANGE_PASSWORD,\r\n    payload: {\r\n      ...changePassword,\r\n      state: \"saving\",\r\n    },\r\n  });\r\n\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  try {\r\n    const user = await axios.patch(\r\n      \"/api/v1/users/updatePassword\",\r\n      changePassword,\r\n      {\r\n        headers: {\r\n          authorization: `Bearer ${token}`,\r\n        },\r\n      }\r\n    );\r\n\r\n    saveToken(user.data.token);\r\n\r\n    dispatch({\r\n      type: CHANGE_PASSWORD,\r\n      payload: {\r\n        currentPassword: \"\",\r\n        newPassword: \"\",\r\n        confirmPassword: \"\",\r\n        state: \"saved\",\r\n      },\r\n    });\r\n\r\n    setTimeout(() => {\r\n      dispatch({\r\n        type: CHANGE_PASSWORD,\r\n        payload: {\r\n          currentPassword: \"\",\r\n          newPassword: \"\",\r\n          confirmPassword: \"\",\r\n          state: \"\",\r\n        },\r\n      });\r\n    }, 3000);\r\n  } catch (err) {\r\n    dispatch({\r\n      type: CHANGE_PASSWORD,\r\n      payload: {\r\n        ...changePassword,\r\n        state: \"failed\",\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const logout = () => async (dispatch, getState) => {\r\n  dispatch({\r\n    type: AUTH_USER,\r\n    payload: {},\r\n  });\r\n\r\n  dispatch({\r\n    type: CONVERSATIONS,\r\n    payload: { data: [], notifications: 0 },\r\n  });\r\n\r\n  dispatch({\r\n    type: USERS,\r\n    payload: [],\r\n  });\r\n\r\n  localStorage.setItem(\"token\", \"\");\r\n\r\n  await axios.get(\"/api/v1/users/logout\");\r\n};\r\n\r\nexport const deleteAccount = () => async (dispatch, getState) => {\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  try {\r\n    await axios.delete(\"/api/v1/users/deleteMe\", {\r\n      headers: {\r\n        authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    history.push(root);\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport const loadData = () => async (dispatch) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  loadDataHelper(dispatch, token, true, true, false, true);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}