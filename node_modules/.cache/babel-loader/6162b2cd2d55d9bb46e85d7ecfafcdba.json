{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ghassen\\\\Desktop\\\\lyoum\\\\3\\\\chat-app-client\\\\src\\\\components\\\\AuthComponent\\\\Resetpassword.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { setResetPassword, resetPassword } from \"../../actions\";\nimport { newUserDataState } from \"../../actions/types\";\nimport Alert from \"react-bootstrap/Alert\";\nimport spinner from \"../spinner.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Resetpassword extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onSubmit = event => {\n      event.preventDefault();\n      if (this.props.resetPasswordData.state === \"submitting\") return;\n      const {\n        resetPasswordData\n      } = this.props;\n      if (resetPasswordData.password.length < 12) return this.props.setResetPassword(true, resetPasswordData.password, resetPasswordData.confirmPassword, newUserDataState.lengthValidation);\n      if (resetPasswordData.password !== resetPasswordData.confirmPassword) return this.props.setResetPassword(true, resetPasswordData.password, resetPasswordData.confirmPassword, newUserDataState.unmatchedValidation);\n      this.props.resetPassword(this.props.match.params.token);\n    };\n\n    this.onInputFieldChange = (event, field) => {\n      switch (field) {\n        case \"password\":\n          this.props.setResetPassword(true, event.target.value, this.props.resetPasswordData.confirmPassword, \"typing\");\n          break;\n\n        case \"confirmPassword\":\n          this.props.setResetPassword(true, this.props.resetPasswordData.password, event.target.value, \"typing\");\n          break;\n\n        default:\n          this.props.setResetPassword(true, this.props.resetPasswordData.password, this.props.resetPasswordData.confirmPassword, \"typing\");\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.props.setResetPassword(true, \"\", \"\", \"empty\");\n  }\n\n  render() {\n    if (!this.props.resetPasswordData) return \"\";\n    const validation = this.props.resetPasswordData.state.startsWith(\"validation\");\n    const invalidToken = this.props.resetPasswordData.state === newUserDataState.invalidToken;\n    let failedMessage;\n\n    if (validation) {\n      failedMessage = this.props.resetPasswordData.state.split(\",\")[1];\n    } else if (invalidToken) {\n      failedMessage = \"Something went wrong ! Maybe token is invalid or has expired.\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: this.onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"signup-warning\",\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          show: validation || invalidToken,\n          variant: \"danger\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: failedMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"form__heading\",\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form__fieldsWrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"New password\",\n          required: true,\n          autoFocus: true,\n          value: this.props.resetPasswordData.password,\n          onChange: event => this.onInputFieldChange(event, \"password\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Confirm password\",\n          required: true,\n          value: this.props.resetPasswordData.confirmPassword,\n          onChange: event => this.onInputFieldChange(event, \"confirmPassword\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"form__submitBtn\",\n        children: this.props.resetPasswordData.state === newUserDataState.submitting ? /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"icon-spinner\",\n          src: spinner,\n          alt: \"spinner icon svg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this) : \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = ({\n  resetPasswordData\n}) => {\n  return {\n    resetPasswordData\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, {\n  setResetPassword,\n  resetPassword\n})(Resetpassword));","map":{"version":3,"sources":["C:/Users/Ghassen/Desktop/lyoum/3/chat-app-client/src/components/AuthComponent/Resetpassword.jsx"],"names":["React","connect","withRouter","setResetPassword","resetPassword","newUserDataState","Alert","Resetpassword","Component","onSubmit","event","preventDefault","props","resetPasswordData","state","password","length","confirmPassword","lengthValidation","unmatchedValidation","match","params","token","onInputFieldChange","field","target","value","componentDidMount","render","validation","startsWith","invalidToken","failedMessage","split","submitting","spinner","mapStateToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { setResetPassword, resetPassword } from \"../../actions\";\r\nimport { newUserDataState } from \"../../actions/types\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport spinner from \"../spinner.svg\";\r\n\r\nclass Resetpassword extends React.Component {\r\n  onSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (this.props.resetPasswordData.state === \"submitting\") return;\r\n\r\n    const { resetPasswordData } = this.props;\r\n\r\n    if (resetPasswordData.password.length < 12)\r\n      return this.props.setResetPassword(\r\n        true,\r\n        resetPasswordData.password,\r\n        resetPasswordData.confirmPassword,\r\n        newUserDataState.lengthValidation\r\n      );\r\n\r\n    if (resetPasswordData.password !== resetPasswordData.confirmPassword)\r\n      return this.props.setResetPassword(\r\n        true,\r\n        resetPasswordData.password,\r\n        resetPasswordData.confirmPassword,\r\n        newUserDataState.unmatchedValidation\r\n      );\r\n\r\n    this.props.resetPassword(this.props.match.params.token);\r\n  };\r\n\r\n  onInputFieldChange = (event, field) => {\r\n    switch (field) {\r\n      case \"password\":\r\n        this.props.setResetPassword(\r\n          true,\r\n          event.target.value,\r\n          this.props.resetPasswordData.confirmPassword,\r\n          \"typing\"\r\n        );\r\n        break;\r\n      case \"confirmPassword\":\r\n        this.props.setResetPassword(\r\n          true,\r\n          this.props.resetPasswordData.password,\r\n          event.target.value,\r\n          \"typing\"\r\n        );\r\n        break;\r\n      default:\r\n        this.props.setResetPassword(\r\n          true,\r\n          this.props.resetPasswordData.password,\r\n          this.props.resetPasswordData.confirmPassword,\r\n          \"typing\"\r\n        );\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.setResetPassword(true, \"\", \"\", \"empty\");\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.resetPasswordData) return \"\";\r\n\r\n    const validation = this.props.resetPasswordData.state.startsWith(\r\n      \"validation\"\r\n    );\r\n    const invalidToken =\r\n      this.props.resetPasswordData.state === newUserDataState.invalidToken;\r\n\r\n    let failedMessage;\r\n    if (validation) {\r\n      failedMessage = this.props.resetPasswordData.state.split(\",\")[1];\r\n    } else if (invalidToken) {\r\n      failedMessage =\r\n        \"Something went wrong ! Maybe token is invalid or has expired.\";\r\n    }\r\n\r\n    return (\r\n      <form className=\"form\" onSubmit={this.onSubmit}>\r\n        <div className=\"signup-warning\">\r\n          <Alert show={validation || invalidToken} variant=\"danger\">\r\n            <p>{failedMessage}</p>\r\n          </Alert>\r\n        </div>\r\n\r\n        <h2 className=\"form__heading\">Reset Password</h2>\r\n\r\n        <div className=\"form__fieldsWrapper\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"New password\"\r\n            required\r\n            autoFocus\r\n            value={this.props.resetPasswordData.password}\r\n            onChange={(event) => this.onInputFieldChange(event, \"password\")}\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Confirm password\"\r\n            required\r\n            value={this.props.resetPasswordData.confirmPassword}\r\n            onChange={(event) =>\r\n              this.onInputFieldChange(event, \"confirmPassword\")\r\n            }\r\n          />\r\n        </div>\r\n\r\n        <button type=\"submit\" className=\"form__submitBtn\">\r\n          {this.props.resetPasswordData.state ===\r\n          newUserDataState.submitting ? (\r\n            <img\r\n              className=\"icon-spinner\"\r\n              src={spinner}\r\n              alt=\"spinner icon svg\"\r\n            />\r\n          ) : (\r\n            \"Update\"\r\n          )}\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ resetPasswordData }) => {\r\n  return { resetPasswordData };\r\n};\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, { setResetPassword, resetPassword })(Resetpassword)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}